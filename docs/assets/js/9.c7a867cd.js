(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{334:function(v,_,t){"use strict";t.r(_);var a=t(4),r=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"数据仓库概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据仓库概念"}},[v._v("#")]),v._v(" 数据仓库概念")]),v._v(" "),_("p",[v._v("数据仓库，英文名称为Data Warehouse，可简写为DW或DWH。数据仓库，是为企业所有级别的决策制定过程，提供所有类型数据支持的战略集合。它是单个数据存储，出于分析性报告和决策支持目的而创建。 为需要业务智能的企业，提供指导业务流程改进、监视时间、成本、质量以及控制。")]),v._v(" "),_("h2",{attrs:{id:"数据仓库和数据库的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据仓库和数据库的区别"}},[v._v("#")]),v._v(" 数据仓库和数据库的区别")]),v._v(" "),_("p",[_("strong",[v._v("数据库的操作："),_("strong",[v._v("一般称为")]),v._v("联机事务处理OLTP（On-Line Transaction Processing）")]),v._v("，是"),_("strong",[v._v("针对具体的业务在数据库中的联机操作")]),v._v("，具有数据量较少的特点，通常对少量的数据记录进行查询、修改。")]),v._v(" "),_("p",[_("strong",[v._v("数据仓库的操作："),_("strong",[v._v("一般称为")]),v._v("联机分析处理OLAP（On-Line Analytical Processing）")]),v._v("，是"),_("strong",[v._v("针对某些主题（综合数据）的历史数据进行分析，支持管理决策")]),v._v("。")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("功能")]),v._v(" "),_("th",[v._v("数据仓库")]),v._v(" "),_("th",[v._v("数据库")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("数据范围")]),v._v(" "),_("td",[v._v("存储历史的、完整的、反应历史变化的")]),v._v(" "),_("td",[v._v("当前状态数据")])]),v._v(" "),_("tr",[_("td",[v._v("数据变化")]),v._v(" "),_("td",[v._v("可添加、无删除、无变更的、反应历史变化")]),v._v(" "),_("td",[v._v("支持频繁的增、删、改、查操作")])]),v._v(" "),_("tr",[_("td",[v._v("应用场景")]),v._v(" "),_("td",[v._v("面向分析、支持战略决策")]),v._v(" "),_("td",[v._v("面向业务交易流程")])]),v._v(" "),_("tr",[_("td",[v._v("设计理论")]),v._v(" "),_("td",[v._v("违范式、适当冗余")]),v._v(" "),_("td",[v._v("遵照范式（第、二、三等范式），避免冗余")])]),v._v(" "),_("tr",[_("td",[v._v("储量")]),v._v(" "),_("td",[v._v("非频繁、大批量、高吞吐、有延迟")]),v._v(" "),_("td",[v._v("频繁、小批次、高并发、低延迟")])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td"),v._v(" "),_("td")])])]),v._v(" "),_("h2",{attrs:{id:"数据仓库搭建原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据仓库搭建原则"}},[v._v("#")]),v._v(" 数据仓库搭建原则")]),v._v(" "),_("ul",[_("li",[v._v("稳定")])]),v._v(" "),_("p",[v._v("数据产出稳定且有保障")]),v._v(" "),_("ul",[_("li",[v._v("可信")])]),v._v(" "),_("p",[v._v("数据干净质量高")]),v._v(" "),_("ul",[_("li",[v._v("丰富")])]),v._v(" "),_("p",[v._v("涵盖的业务足够广泛")]),v._v(" "),_("ul",[_("li",[v._v("透明")])]),v._v(" "),_("p",[v._v("数据构成体系清晰透明")]),v._v(" "),_("h2",{attrs:{id:"数据仓库常用系统架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据仓库常用系统架构"}},[v._v("#")]),v._v(" 数据仓库常用系统架构")]),v._v(" "),_("p",[_("img",{attrs:{src:"/img/%E6%95%B0%E4%BB%93%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.jpg",alt:"数仓系统架构"}})]),v._v(" "),_("p",[v._v("ODS层（临时存储层）：这一层做的工作是贴源，而这些数据和源系统的数据是同构，一般对这些数据分为全量更新和增量更新，通常在贴源的过程中会做一些简单的清洗，\nDW层（数据仓库层）：将一些数据关联的日期进行拆分，使得其更具体的分类，一般拆分成年、月、日，而ODS层到DW层的ETL脚本会根据业务需求对数据进行清洗、设计，如果没有业务需求，则根据源系统的数据结构和未来的规划去做处理，对这层的数据要求是一致、准确、尽量建立数据的完整性。\nAPP层（引用层）：提供报表和数据沙盘展示所需的数据。")]),v._v(" "),_("h3",{attrs:{id:"数据建模"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据建模"}},[v._v("#")]),v._v(" 数据建模")]),v._v(" "),_("h4",{attrs:{id:"数据模型架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据模型架构"}},[v._v("#")]),v._v(" 数据模型架构")]),v._v(" "),_("p",[_("img",{attrs:{src:"/img/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.jpg",alt:"数据模型架构"}})]),v._v(" "),_("p",[v._v("在大体上，我们将数据模型分为5大块。")]),v._v(" "),_("p",[v._v("系统记录域：数据仓库业务数据存储区，保证数据的一致性。\n内部管理域：用于内部管理的元数据，统一的元数据管理。\n汇总域：这里的数据来自系统记录域的汇总，保证分析域的主题分析性能，满足部分报表查询。\n分析域：各个业务部分的具体主题业务分析，可以单独存储在相应的数据集市中。\n反馈域：用于相应的前端的反馈数据，视业务的需要设置这个域。")]),v._v(" "),_("h4",{attrs:{id:"维度和指标-度量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#维度和指标-度量"}},[v._v("#")]),v._v(" 维度和指标（度量）")]),v._v(" "),_("p",[_("strong",[v._v("维度和指标时数据分析领域常用的概念")]),v._v("，亦是在设计数据仓库过程中需要考虑的。")]),v._v(" "),_("p",[_("strong",[v._v("维度")]),v._v("就是数据的观察角度，即从哪个角度去分析问题，看待问题。")]),v._v(" "),_("p",[v._v("**指标（度量）**就是从维度的基础上去衡算这个结果的值。")]),v._v(" "),_("p",[v._v("维度一般是一个离散的值，比如时间维度上每一个独立的日期或地域，因此统计时，可以把维度相同记录的聚合在一起，应用聚合函数做累加、均值、最大值、最小值等聚合计算。")]),v._v(" "),_("p",[v._v("指标（度量）就是被聚合的通计算，即聚合运算的结果，一般是一个连续的值。")]),v._v(" "),_("p",[v._v("比如我们可以从银行的存款额和企业的贷款额之间的计算，推算出目前的市场状况是如何，如果企业的贷款额高，银行的存款额也高，说明人们不愿意消费了，都把钱存起来，企业产品卖不出去，要发工资，那么自然要贷款了，这只是一个例子，具体还需要结合很多数据做分析。")]),v._v(" "),_("h4",{attrs:{id:"事实表和维度表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事实表和维度表"}},[v._v("#")]),v._v(" 事实表和维度表")]),v._v(" "),_("p",[v._v("事实表和维度表是在设计数据仓库过程中需要考虑的。")]),v._v(" "),_("p",[v._v("事实表（Fact Table）是指存储有事实记录的表，如系统的日志、销售记录、用户访问日志等信息，事实表的记录是动态的增长的，所以体积是大于维度表。")]),v._v(" "),_("p",[v._v("用户访问日志（事实表）：用户名、url、时间…")]),v._v(" "),_("p",[v._v("维度表（Dimension Table）也称为查找表（Lookup Table）是与事实表相对应的表，这个表保存了维度的属性值，可以跟事实表做关联，相当于是将事实表中经常重复的数据抽取、规范出来用一张表管理，常见的有日期（日、周、月、季度等属性）、地区表等，所以维度表的变化通常不会太大。")]),v._v(" "),_("p",[v._v("维度表的存在缩小了事实表的大小，便于维度的管理和CURD维度的属性，不必对事实表的大量记录进行改动，并且可以给多个事实表重用。")]),v._v(" "),_("p",[v._v("省份表（维度表）：北京市、广东省、上海市…")]),v._v(" "),_("h4",{attrs:{id:"数据模型建立过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据模型建立过程"}},[v._v("#")]),v._v(" 数据模型建立过程")]),v._v(" "),_("p",[v._v("业务模型：业务分解和程序化，确定好业务的边界及业务流程，如订单、支付都是一个单独的业务模块")]),v._v(" "),_("p",[v._v("领域模型：业务概念的抽象、分组，整理分组之间的关联，比如用户购物的业务，抽成一个更大的模型，这个模型一般相对于行业。")]),v._v(" "),_("p",[v._v("逻辑建模：领域模型中的业务概念实体化，并考虑实体的具体属性及实体与实体之间的关系，比如订单（订单号、付款人…）和支付（金额、支付时间…）的关系。")]),v._v(" "),_("p",[v._v("物理模型：解决实际应用的落地开发、上线等问题，及性能等一些具体的技术问题。")]),v._v(" "),_("h4",{attrs:{id:"范式建模法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#范式建模法"}},[v._v("#")]),v._v(" 范式建模法")]),v._v(" "),_("p",[_("img",{attrs:{src:"/img/%E6%95%B0%E4%BB%93-%E8%8C%83%E5%BC%8F%E5%BB%BA%E6%A8%A1%E6%B3%95.jpg",alt:"数仓-范式建模法"}})]),v._v(" "),_("p",[v._v("数据仓库的概念模型（域模型）应该包含企业数据模型的概念模型（域模型）之间的关系，以及各主题域的定义。")]),v._v(" "),_("p",[v._v("数据仓库的概念模型（域模型）应该比业务系统的主题域模型范围更加广。")]),v._v(" "),_("p",[v._v("在数据仓库的逻辑模型需要从业务系统的数据模型中的逻辑模型中抽象实体，实体的属性，实体的子类、关系等，在某些时候反而限制了数据仓库模型的灵活性，在底层数据向数据集市汇总时，需要进行一定的变通。")]),v._v(" "),_("h4",{attrs:{id:"维度建模法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#维度建模法"}},[v._v("#")]),v._v(" 维度建模法")]),v._v(" "),_("p",[_("img",{attrs:{src:"/img/%E6%95%B0%E4%BB%93-%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%B3%95.jpg",alt:"数仓-维度建模法"}})]),v._v(" "),_("p",[v._v("维度建模法的特点在于需要进行大量的数据预处理、预计算，因此会导致大量的数据处理工作，而且业务发生变化，需要重新进行维度的定义时，往往需要重新进行维度数据的预处理、预计算，使用时直接调用计算好的结果，进而导致大量的数据冗余，最大的作用就是解决了性能的问题。")]),v._v(" "),_("h4",{attrs:{id:"实体建模法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实体建模法"}},[v._v("#")]),v._v(" 实体建模法")]),v._v(" "),_("p",[_("img",{attrs:{src:"/img/%E6%95%B0%E4%BB%93-%E5%AE%9E%E4%BD%93%E5%BB%BA%E6%A8%A1%E6%B3%95.jpg",alt:"数仓-实体建模法"}})]),v._v(" "),_("p",[v._v("实体建模法是一种抽象客观世界的方法，细分为一个个实体，以及实体之间的关系，将一个业务划分为3个过程，因此只能局限在业务建模和领域建模的阶段，因此到了逻辑建模阶段和物理建模阶段，则是范式和维度建模的发挥了。")]),v._v(" "),_("h4",{attrs:{id:"星型模型架构-vs-雪花模型架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#星型模型架构-vs-雪花模型架构"}},[v._v("#")]),v._v(" 星型模型架构 VS 雪花模型架构")]),v._v(" "),_("p",[_("img",{attrs:{src:"/img/%E6%95%B0%E4%BB%93-%E6%98%9F%E5%9E%8B%E9%9B%AA%E8%8A%B1%E5%BB%BA%E6%A8%A1.jpg",alt:"数仓-星型雪花建模"}})]),v._v(" "),_("p",[v._v("当设计好概念模型时，就要根据概念模型设计逻辑模型，而在设计逻辑模型是，通常根据事实表和维度表的关系，将常见的模型架构分为星型模型和雪花型模型。")]),v._v(" "),_("p",[v._v("星型模型架构是一种非正规化的结构，特点是有一张事实表，多张维度表，是不存在渐变维度的，事实表和维度表通过主外键相关联，维度表之间是没有关联，因为维度表的数据冗余，所以统计查询时不需要做过多外部连接。")]),v._v(" "),_("p",[v._v("雪花模型架构就是将星型模型中的某些维度表抽取成更细粒度的维度表，然后让维度表之间也进行关联，通过最大限度的减少数据存储量以及联合较小的维度表来改善查询性能。")])])}),[],!1,null,null,null);_.default=r.exports}}]);